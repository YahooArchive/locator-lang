/*jslint node:true, nomen: true*/

'use strict';

var express = require('express'),
    Locator = require('locator'),
    LocatorLang = require('../'), // require('locator-lang'), // make sure you add it to package.json as well
    app = express(),
    locatorObj = new Locator({ buildDirectory: 'build' }),

    DEFAULT_LANG = 'en';

// serving static compiled files
app.use(express.static('./build'));

// Route to access all lang entries for a particular file in a bundle
// * In this example there is only one locatorBundle, the app itself and
//   it is named `demo` from package.json->name definition
// * In this example, there is only one langBundle denotated by `foo`
//   and correspond to `lang/foo.json` file.
// * You can navigate to:
//   http://localhost:3000/demo/foo
//   which produce a json object with the entries collected by the plugin.
// * You can also access:
//   http://localhost:3000/demo-0.0.1/demo-lang-foo.js
//   which access to the static yui module generated by the plugin
// * When it comes to lang specific, you can do this:
//   http://localhost:3000/demo/foo?lang=fr-FR
//   which produce a json object with the specific lang entries collected by the plugin,
//   in this case, accessing the `fr-FR` version of it.
//   or this:
//   http://localhost:3000/demo-0.0.1/demo-lang-foo_fr-fr.js
//   which access to the specific lang version of the static yui module generated by the
//   plugin. keep in mind that the url should be the lower case version of the BCP 47 language tag,
//   while the `lang` query string is the original BCP 47 language tag.
// * The default BCP 47 language tag will be `en`.
// --------
app.get('/:locatorBundle/:langBundle', function (req, res, next) {
    var reqLang = req.query.lang || DEFAULT_LANG;
    res.send({
        locatorBundle: req.params.locatorBundle,
        langBundle: req.params.langBundle,
        lang: reqLang,
        entries: locatorObj.getBundle(req.params.locatorBundle).lang[reqLang][req.params.langBundle]
    });
});

// using the lang plugin and specifying the output format to `yui`
locatorObj.plug(new LocatorLang({
    format: 'yui',
    defaultLang: DEFAULT_LANG
}));

locatorObj.parseBundle(__dirname, {}).then(function () {

    // listening for traffic only after locator finishes the walking process
    app.listen(3000, function () {
        console.log("Server listening on port 3000");
    });

}, function (e) {
    console.log(e);
    console.log(e.stack);
});
